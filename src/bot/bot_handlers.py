import telebot
from telebot.types import Message, BotCommand
import os
from dotenv import load_dotenv, dotenv_values
from src.parser.zelart_parser import PrestaShopScraper
from src.database.mongodb import Database
from apscheduler.schedulers.background import BackgroundScheduler
from dataclasses import dataclass

#! –≠—Ç–æ –ª—É—á—à–µ –≤—ã–Ω–µ—Å—Ç–∏ –æ—Ç–¥–µ–ª—å–Ω–æ –≤ ExceptionsHandler.py
class ExceptionHandler(telebot.ExceptionHandler):
    def handle(self, exception):
        print("Exception occured: ", exception)

#! –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã —Ç–æ–∂–µ –ª—É—á—à–µ —Ö—Ä–∞–Ω–∏—Ç—å –æ—Ç–¥–µ–ª—å–Ω–æ
ZELART_WEBSITE = "zelart.com.ua"

#? –¥–∞—Ç–∞–∫–ª–∞—Å—Å—ã - —ç—Ç–æ –∏–º–±–∞
@dataclass
class BotCommands:
    start: str = "start"
    add_product: str = "add"
    remove_product: str = "remove"
    set_time: str = "time"
    info: str = "info"
    help: str = "help"

bot_commands = BotCommands()


class Bot(telebot.TeleBot):
    def __init__(self):
        BOT_TOKEN = os.environ["BOT_TOKEN"]
        super().__init__(BOT_TOKEN)

        self.db = Database()
        hours, minutes = self.db.get_parse_time()

        self.scheduler = BackgroundScheduler()
        self.schedule_parse_time(hours, minutes)

        self.setup_command_menu()
        self.setup_command_handlers()


    def setup_command_menu(self):
        commands = [
            BotCommand(command=bot_commands.add_product, description="–î–æ–¥–∞—Ç–∏ —Ç–æ–≤–∞—Ä"),
            BotCommand(command=bot_commands.remove_product, description="–í–∏–¥–∞–ª–∏—Ç–∏ —Ç–æ–≤–∞—Ä"),
            BotCommand(command=bot_commands.info, description="–ó–≤i—Ç"),
            BotCommand(command=bot_commands.set_time, description="–ó–∞–¥–∞—Ç–∏ —á–∞—Å –ø–∞—Ä—Å–∏–Ω–≥—É"),
            BotCommand(command=bot_commands.help, description="–í—Åi –∫–æ–º–∞–Ω–¥–∏ –±–æ—Ç–∞"),
        ]
        self.set_my_commands(commands)


    def setup_command_handlers(self):
        @self.message_handler(commands=[bot_commands.start])
        def send_welcome(message: Message):
            user = {
                "chat_id": message.from_user.id,
                "username": message.from_user.username,
            }
            self.db.insert_user(user)

            self.send_message(message.from_user.id, f"–ü—Ä–∏–≤—ñ—Ç! –Ø –±–æ—Ç –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥—É {ZELART_WEBSITE}")
            self.get_info(message)

        @self.message_handler(commands=[bot_commands.add_product])
        def send_welcome(message: Message):
            self.send_message(message.from_user.id, f"–í–≤–µ–¥–∏ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ —Ç–æ–≤–∞—Ä i–∑ —Å–∞–π—Ç—É {ZELART_WEBSITE}")
            self.register_next_step_handler(message, self.process_parse_link)
        
        #? /time
        @self.message_handler(commands=[bot_commands.set_time])
        def set_time(message: Message):
            parse_time = self.get_parse_time()
            
            self.send_message(message.from_user.id, f"–û –∫–æ—Ç—Äi–π –º–µ–Ωi –∫—Ä–∞—â–µ –ø–µ—Ä–µ–≤i—Ä—è—Ç–∏ —Ç–æ–≤–∞—Ä–∏?\n\n–ó–∞—Ä–∞–∑ —Ü–µ {parse_time}")
            self.register_next_step_handler(message, self.set_time)
       
        #? /remove
        @self.message_handler(commands=[bot_commands.remove_product])
        def remove_product(message: Message):
            self.send_message(message.from_user.id, f"üîó –íi–¥–ø—Ä–∞–≤ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –ø—Ä–æ–¥—É–∫—Ç, —è–∫–∏–π —Ö–æ—á–µ—à –≤–∏–¥–∞–ª–∏—Ç–∏")
            self.register_next_step_handler(message, self.remove_product)
        
        #? /info
        @self.message_handler(commands=[bot_commands.info])
        def remove_product(message: Message):
            self.send_message(message.from_user.id, f"üë∑‚Äç‚ôÇÔ∏è –ó–≤i—Ç—É—é –ø—Ä–æ —Ä–æ–±–æ—Ç—É")
            self.get_info(message)
        
        #? /help
        @self.message_handler(commands=[bot_commands.help])
        def get_help(message: Message):
            self.send_message(message.from_user.id, f"‚≠ê –£—Å—ñ –∫–æ–º–∞–Ω–¥–∏ –±–æ—Ç–∞\n\n/{bot_commands.start} - –°—Ç–∞—Ä—Ç\n/{bot_commands.add_product} - –î–æ–¥–∞—Ç–∏ —Ç–æ–≤–∞—Ä\n/{bot_commands.remove_product} - –í–∏–¥–∞–ª–∏—Ç–∏ —Ç–æ–≤–∞—Ä\n/{bot_commands.info} - –ó–≤i—Ç –ø—Ä–æ —Ä–æ–±–æ—Ç—É\n/{bot_commands.set_time} - –ó–∞–¥–∞—Ç–∏ —á–∞—Å –ø–∞—Ä—Å–∏–Ω–≥—É")



    def process_parse_link(self, message: Message):
        link = message.text
        parser = PrestaShopScraper()
        product = parser.scrape_product(link)

        self.db.insert_product(product)

        if product["isHidden"] == True:
            stock = "–ù–µ–º–∞—î –≤ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ"
        elif product["isHidden"] == False:
            stock = "–Ñ –≤ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ"

        #! –î–∞–ª—å—à–µ –∏–¥—ë—Ç —Ç—É–ø–æ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–¥–∞, –µ–≥–æ –º–æ–∂–Ω–æ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å
        if product["priceCur"] == product["priceWithDiscount"]:
           self.send_message(
            message.from_user.id,
            f"""‚ûï –¢–µ–ø–µ—Ä —è —Å–ªi–¥–∫—É—é –∑–∞ —Ç–æ–≤–∞—Ä–æ–º:\n{link}

- –ù–∞–∑–≤–∞: {product["title"]}
- –¶—ñ–Ω–∞ –æ–ø—Ç–æ–º: {product["priceCur"]} –≥—Ä–Ω
- –¶—ñ–ª—å–∫—ñ—Å—Ç—å —Ç–æ–≤–∞—Ä—ñ–≤ –¥–ª—è –æ–ø—Ç—É: {product["bigOptQuantity"]} —à—Ç
- –†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–∞ —Ä–æ–∑–¥—Ä—ñ–±–Ω–∞ —Ü—ñ–Ω–∞: {product["priceSrp"]} –≥—Ä–Ω
- –ù–∞—è–≤–Ω—ñ—Å—Ç—å: {stock}
"""
            )
        elif product["priceCur"] != product["priceWithDiscount"]:
            self.send_message(
            message.from_user.id,
            f"""‚ûï –¢–µ–ø–µ—Ä —è —Å–ªi–¥–∫—É—é –∑–∞ —Ç–æ–≤–∞—Ä–æ–º:\n{link}

- –ù–∞–∑–≤–∞: {product["title"]}
- –¶—ñ–Ω–∞ –æ–ø—Ç–æ–º: {product["priceCur"]} –≥—Ä–Ω
- –¶—ñ–Ω–∞ –∑—ñ –∑–Ω–∏–∂–∫–æ—é: {product["priceWithDiscount"]} –≥—Ä–Ω
- –¶—ñ–ª—å–∫—ñ—Å—Ç—å —Ç–æ–≤–∞—Ä—ñ–≤ –¥–ª—è –æ–ø—Ç—É: {product["bigOptQuantity"]} —à—Ç
- –†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–∞ —Ä–æ–∑–¥—Ä—ñ–±–Ω–∞ —Ü—ñ–Ω–∞: {product["priceSrp"]} –≥—Ä–Ω
- –ù–∞—è–≤–Ω—ñ—Å—Ç—å: {stock}
"""
            )

    #! –ó–¥–µ—Å—å –æ—á–µ–Ω—å –ø–ª–æ—Ö–æ–π –∫–æ–¥ ü§ñ
    def update_products_daily(self):
        users = self.db.find_every_user()
        for user in users:
            self.chat_id_for_reminder = user["chat_id"]
            if self.chat_id_for_reminder:
                try:
                    #! –¶–∏–∫–ª –≤ —Ü–∏–∫–ª–µ - –ø–ª–æ—Ö–æ
                    #! –ï—Å–ª–∏ —Ç—ã –±—É–¥–µ—à—å –¥–æ—Å—Ç–∞–≤–∞—Ç—å —Ç–æ–≤–∞—Ä—ã –º–∞—Å—Å–∏–≤–æ–º –∏–∑ DB, 
                    #! —Ç–æ —Å–º–æ–∂–µ—à—å –∏–∑–±–∞–≤–∏—Ç—å—Å—è –æ—Ç –æ–¥–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ 
                    products = self.db.get_products()  
                    parser = PrestaShopScraper()
                    for product_database in products:
                        link = product_database["url"]
                        product_parser = parser.scrape_product(link)
                        reply_string = f"–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ —Ç–æ–≤–∞—Ä—É {product_parser['title']} –∑–º—ñ–Ω–∏–ª–∏—Å—å:\n\n"
                        product_change_status = False
                        for i in product_parser:
                            if product_parser[i] != product_database[i]:
                                product_change_status = True
                        
                                print(f"product {i} has changed")

                                #! –°–æ–≤–µ—Ç—É—é —Å–æ–∑–¥–∞—Ç—å –æ–±—ä–µ–∫—Ç —á–µ—Ä–µ–∑ dataclass –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –±—ã–ª–∞ –ø–æ–¥—Å–≤–µ—Ç–∫–∞ –∏ –ø–æ–¥—Å–∫–∞–∑–∫–∏, –∞ –Ω–µ –ø—Ä–æ—Å—Ç–æ —Ö–∞—Ä–¥–∫–æ–¥–∏—Ç—å –∫–ª—é—á–∏
                                if i == "priceCur":
                                    key = "–¶—ñ–Ω–∞"
                                    key_value_database = f"{product_database[i]} –≥—Ä–Ω"
                                    key_value_parser = f"{product_parser[i]} –≥—Ä–Ω"
                                elif i == "priceWithDiscount":
                                    key = "–¶—ñ–Ω–∞ –∑—ñ –∑–Ω–∏–∂–∫–æ—é"
                                    key_value_database = f"{product_database[i]} –≥—Ä–Ω"
                                    key_value_parser = f"{product_parser[i]} –≥—Ä–Ω"
                                elif i == "priceBigOpt":
                                    key = "–¶—ñ–Ω–∞ –æ–ø—Ç–æ–º"
                                    key_value_database = f"{product_database[i]} –≥—Ä–Ω"
                                    key_value_parser = f"{product_parser[i]} –≥—Ä–Ω"
                                elif i == "bigOptQuantity":
                                    key = "–¶—ñ–ª—å–∫—ñ—Å—Ç—å —Ç–æ–≤–∞—Ä—ñ–≤ –¥–ª—è –æ–ø—Ç—É"
                                    key_value_database = f"{product_database[i]} —à—Ç"
                                    key_value_parser = f"{product_parser[i]} —à—Ç"
                                elif i == "priceSrp":
                                    key = "–†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–∞ —Ä–æ–∑–¥—Ä—ñ–±–Ω–∞ —Ü—ñ–Ω–∞"
                                    key_value_database = f"{product_database[i]} –≥—Ä–Ω"
                                    key_value_parser = f"{product_parser[i]} –≥—Ä–Ω"
                                elif i == "isHidden":
                                    key = "–ù–∞—è–≤–Ω—ñ—Å—Ç—å"
                                    key_value_parser = "–Ñ –≤ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ" if product_parser[i] == False else "–ù–µ–º–∞—î –≤ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ"
                                    key_value_database = "–Ñ –≤ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ" if product_database[i] == False else "–ù–µ–º–∞—î –≤ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ"

                                
                                # if i == "isHidden":
                                reply_string += f"{key} —Ç–æ–≤–∞—Ä—É –∑–º—ñ–Ω–∏–ª–∞—Å—å.\n–†–∞–Ω—ñ—à–µ: {key_value_database}\n–ó–∞—Ä–∞–∑: {key_value_parser}\n\n"
                                    # self.send_message(self.chat_id_for_reminder, f"{key} —Ç–æ–≤–∞—Ä—É {product_parser['title']} –∑–º—ñ–Ω–∏–ª–∞—Å—å.\n{key} —Ä–∞–Ω—ñ—à–µ: {key_value_database}\n{key} –∑–∞—Ä–∞–∑: {key_value_parser}")
                                # else:
                                    # reply_string += f"{key} —Ç–æ–≤–∞—Ä—É –∑–º—ñ–Ω–∏–ª–∞—Å—å.\n–†–∞–Ω—ñ—à–µ: {product_database[i]}\n–ó–∞—Ä–∞–∑: {product_parser[i]}\n\n"
                                    # self.send_message(self.chat_id_for_reminder, f"{key} —Ç–æ–≤–∞—Ä—É {product_parser["title"]} –∑–º—ñ–Ω–∏–ª–∞—Å—å.\n{key} —Ä–∞–Ω—ñ—à–µ: {product_database[i]}\n{key} –∑–∞—Ä–∞–∑: {product_parser[i]}")
                                self.db.update("url", link, i, product_parser[i])
                            else:
                                print(f"product {i} has not changed")
                        if product_change_status == True:
                            self.send_message(self.chat_id_for_reminder, reply_string)
                except Exception as e:
                    print("Exception1:", e)
            else:
                print("No chat id found for reminder")


    #! –í –∏–¥–µ–∞–ª–µ –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å, —á—Ç–æ–±—ã time —Å–æ—Ö—Ä–∞–Ω—è–ª—Å—è –µ—â—ë –∏ –≤ –ë–î
    def set_time(self, message: Message) -> None:
        """ sets check time from given message """
        time: str = message.text
        hour, minutes = self.convert_time(time)
        #? print("üêç hour / minutes: ",hour, minutes)
        self.save_time([hour, minutes])

        if hour is None or minutes is None:
            self.send_message(message.chat.id, f"–ü–µ—Ä–µ–≤i—Ä —Ñ–æ—Ä–º–∞—Ç –≤–≤–æ–¥—É. –ü–æ–≤–∏–Ω–Ω–æ –±—É—Ç–∏ –¥–≤–∞ —á–∏—Å–ª–∞ –∑ –¥–≤—É–∫—Ä–∞–ø–∫–æ—é: 19:00, 20:00...\n\n–ó–∞–ø—É—Å—Ç–∏ –∫–æ–º–∞–Ω–¥—É /{bot_commands.set_time} —â–µ —Ä–∞–∑ —Ç–∞ –≤–≤–µ–¥–∏ —á–∞—Å —É –ø–æ—Ç—Äi–±–Ω–æ–º—É —Ñ–æ—Ä–º–∞—Çi")
        else: 
            self.schedule_parse_time(hour, minutes)
            minutes = self.format_minutes(minutes)

            self.send_message(message.chat.id, f"–î–æ–±—Ä–µ, –∑–∞–≤–æ–¥–∂—É –≥–æ–¥–∏–Ω–Ω–∏–∫ –Ω–∞ {hour}:{minutes}!\n\n–ß–µ–∫–∞–π –∞–ø–¥–µ–π—Ç–∏ –ø–æ —Ç–æ–≤–∞—Ä–∞–º ‚≠ê")

    def schedule_parse_time(self, hour: int = 19, minutes: int = 0) -> None:
        self.scheduler.remove_all_jobs()
        self.scheduler.add_job(self.update_products_daily, 'cron', hour=hour, minute=minutes)
        #? print(self.scheduler.get_jobs())
        print(f"üü¢ Products check will be started at {hour}:{minutes}")


    def save_time(self, time: list[int]):
        """ saves time to DB """
        self.db.update_config(key="parse_time", new_value=time)


    def format_minutes(self, minutes: int) -> str:
        """Formats minutes as a 2-digit string (e.g. 0 ‚Üí '00', 5 ‚Üí '05')"""
        return f"{minutes:02}"


    def convert_time(self, time: str = "") -> list[int] | list[None]:
        """ converts string into list of integers """
        if ":" in time:
            return list(map(int, time.split(":")))
        return [None, None] 

    
    def get_parse_time(self) -> str:
        hours, minutes = self.db.get_parse_time()
        minutes = self.format_minutes(minutes)
        return f"{hours}:{minutes}"
    

    def remove_product(self, message: Message):
        link = message.text
        parser = PrestaShopScraper()
        product = parser.scrape_product(link)
        #? print("üêç product: ",product)

        if product:
            product_id = product["id"]
            self.db.remove_product(product_id)
            self.send_message(message.chat.id, f"–¢–æ–≤–∞—Ä –∑ id {product_id} –±i–ª—å—à–µ –Ω–µ –≤i–¥—Å–ªi–¥–∫–æ–≤—É—î—Ç—å—Å—è üëå")

        else:
            print(f"Can't get product info by this link: {link}")
            self.send_message(message.chat.id, f"–Ø –Ω–µ –∑–ºi–≥ –¥i—Å—Ç–∞—Ç–∏ i–Ω—Ñ—É –ø–æ —Ü—å–æ–º—É —Ç–æ–≤–∞—Ä—É, –≤–∏–±–∞—á üò≠")

    def get_info(self, message: Message):
        products_count = self.db.get_products_count()
        parse_time = self.get_parse_time()
        
        info_message = f"1. –ó–∞—Ä–∞–∑ —è —Å–ªi–¥–∫—É—é –∑–∞ {products_count} —Ç–æ–≤–∞—Ä–∞–º–∏ üîç\n2. –Ø –Ω–∞–¥—Å–∏–ª–∞—é —Ç–æ–±i –∞–ø–¥–µ–π—Ç–∏ —É {parse_time} ‚åö"

        self.send_message(message.chat.id, info_message)
