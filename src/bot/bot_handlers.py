import telebot
from telebot.types import Message, BotCommand
import os
from dotenv import load_dotenv, dotenv_values
from src.parser.zelart_parser import PrestaShopScraper
from src.database.mongodb import Database
from apscheduler.schedulers.background import BackgroundScheduler
from dataclasses import dataclass

#! –≠—Ç–æ –ª—É—á—à–µ –≤—ã–Ω–µ—Å—Ç–∏ –æ—Ç–¥–µ–ª—å–Ω–æ –≤ ExceptionsHandler.py
class ExceptionHandler(telebot.ExceptionHandler):
    def handle(self, exception):
        print("Exception occured: ", exception)

#! –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã —Ç–æ–∂–µ –ª—É—á—à–µ —Ö—Ä–∞–Ω–∏—Ç—å –æ—Ç–¥–µ–ª—å–Ω–æ
ZELART_WEBSITE = "zelart.com.ua"

#? –¥–∞—Ç–∞–∫–ª–∞—Å—Å—ã - —ç—Ç–æ –∏–º–±–∞
@dataclass
class BotCommands:
    set_time: str = "time"

bot_commands = BotCommands()


class Bot(telebot.TeleBot):
    def __init__(self):
        # load_dotenv()
        # config = dotenv_values(".env")
    
        # BOT_TOKEN = config["BOT_TOKEN"]
        BOT_TOKEN = os.environ["BOT_TOKEN"]
        super().__init__(BOT_TOKEN)

        self.db = Database()
        # self.chat_id_for_reminder = os.getenv("REMINDER_CHAT_ID")

        self.scheduler = BackgroundScheduler()
        self.schedule_parse_time(19, 0)

        self.setup_command_menu()
        self.setup_command_handlers()

    def setup_command_menu(self):
        commands = [
            BotCommand(command="start", description="–ü–æ—á–∞—Ç–∏ —Ä–æ–±–æ—Ç—É"),
            BotCommand(command="time", description="–ó–∞–¥–∞—Ç–∏ —á–∞—Å –ø–∞—Ä—Å–∏–Ω–≥—É"),
            BotCommand(command="parse", description="–ó–∞–ø—É—Å—Ç–∏—Ç–∏ –ø–∞—Ä—Å–∏–Ω–≥"),
            BotCommand(command="help", description="–î–æ–ø–æ–º–æ–≥–∞"),
        ]
        self.set_my_commands(commands)




    def setup_command_handlers(self):
        @self.message_handler(commands=['start'])
        def send_welcome(message: Message):
            user = {
                "chat_id": message.from_user.id,
                "username": message.from_user.username,
            }
            self.db.insert_user(user)

            # self.send_daily_reminder()
            self.send_message(message.from_user.id, f"–ü—Ä–∏–≤—ñ—Ç! –Ø –±–æ—Ç –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥—É {ZELART_WEBSITE}")

        @self.message_handler(commands=['parse'])
        def send_welcome(message: Message):
            self.send_message(message.from_user.id, "–í–≤–µ–¥–∏ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ —Ç–æ–≤–∞—Ä i–∑ —Å–∞–π—Ç—É {ZELART_WEBSITE}")
            self.register_next_step_handler(message, self.process_parse_link)
        
        #? –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –≤—ã—Å—Ç–∞–≤–ª–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏
        @self.message_handler(commands=['time'])
        def set_time(message: Message):
            self.send_message(message.from_user.id, "–û –∫–æ—Ç—Äi–π –º–µ–Ωi –∫—Ä–∞—â–µ –ø–µ—Ä–µ–≤i—Ä—è—Ç–∏ —Ç–æ–≤–∞—Ä–∏?\n\n–ß–∞—Å —Ç—Ä–µ–±–∞ –≤–≤–æ–¥–∏—Ç–∏ –∑ –¥–≤—É–∫—Ä–∞–ø–∫–æ—é: 19:00, 20:00")
            self.register_next_step_handler(message, self.set_time)


        @self.message_handler(commands=['help'])
        def send_help(message: Message):
            self.send_message(message.from_user.id, "–£—Å—ñ –∫–æ–º–∞–Ω–¥–∏ –±–æ—Ç–∞:\n/start - –°—Ç–∞—Ä—Ç\n/parse - –ü–∞—Ä—Å–∏–Ω–≥ –ø–æ—Å–∏–ª–∞–Ω–Ω—è\n/help - –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥")


    def process_parse_link(self, message: Message):
        link = message.text
        parser = PrestaShopScraper()
        product = parser.scrape_product(link)

        self.db.insert_product(product)

        if product["isHidden"] == True:
            stock = "–ù–µ–º–∞—î –≤ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ"
        elif product["isHidden"] == False:
            stock = "–Ñ –≤ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ"


        if product["priceCur"] == product["priceWithDiscount"]:
           self.send_message(
            message.from_user.id,
            f"""–ü–∞—Ä—Å–∏–Ω–≥ –ø–æ—Å–∏–ª–∞–Ω–Ω—è: {link}

–ù–∞–∑–≤–∞: {product["title"]}
–¶—ñ–Ω–∞: {product["priceCur"]} –≥—Ä–Ω
–¶—ñ–Ω–∞ –æ–ø—Ç–æ–º: {product["priceBigOpt"]} –≥—Ä–Ω
–¶—ñ–ª—å–∫—ñ—Å—Ç—å —Ç–æ–≤–∞—Ä—ñ–≤ –¥–ª—è –æ–ø—Ç—É: {product["bigOptQuantity"]} —à—Ç
–†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–∞ —Ä–æ–∑–¥—Ä—ñ–±–Ω–∞ —Ü—ñ–Ω–∞: {product["priceSrp"]} –≥—Ä–Ω
–ù–∞—è–≤–Ω—ñ—Å—Ç—å?: {stock}
"""
            )
        elif product["priceCur"] != product["priceWithDiscount"]:
            self.send_message(
            message.from_user.id,
            f"""–ü–∞—Ä—Å–∏–Ω–≥ –ø–æ—Å–∏–ª–∞–Ω–Ω—è: {link}

–ù–∞–∑–≤–∞: {product["title"]}
–¶—ñ–Ω–∞: {product["priceCur"]} –≥—Ä–Ω
–¶—ñ–Ω–∞ –∑—ñ –∑–Ω–∏–∂–∫–æ—é: {product["priceWithDiscount"]} –≥—Ä–Ω
–¶—ñ–Ω–∞ –æ–ø—Ç–æ–º: {product["priceBigOpt"]} –≥—Ä–Ω
–¶—ñ–ª—å–∫—ñ—Å—Ç—å —Ç–æ–≤–∞—Ä—ñ–≤ –¥–ª—è –æ–ø—Ç—É: {product["bigOptQuantity"]} —à—Ç
–†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–∞ —Ä–æ–∑–¥—Ä—ñ–±–Ω–∞ —Ü—ñ–Ω–∞: {product["priceSrp"]} –≥—Ä–Ω
–ù–∞—è–≤–Ω—ñ—Å—Ç—å?: {stock}
"""
            )

    #! –ó–¥–µ—Å—å –æ—á–µ–Ω—å –ø–ª–æ—Ö–æ–π –∫–æ–¥ ü§ñ
    def update_products_daily(self):
        users = self.db.find_every_user()
        for user in users:
            self.chat_id_for_reminder = user["chat_id"]
            if self.chat_id_for_reminder:
                try:
                    products = self.db.find_every_product()  
                    parser = PrestaShopScraper()
                    for product_database in products:
                        link = product_database["url"]
                        product_parser = parser.scrape_product(link)
                        reply_string = f"–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ —Ç–æ–≤–∞—Ä—É {product_parser['title']} –∑–º—ñ–Ω–∏–ª–∏—Å—å:\n\n"
                        product_change_status = False
                        for i in product_parser:
                            if product_parser[i] != product_database[i]:
                                product_change_status = True
                        
                                print(f"product {i} has changed")

                                if i == "priceCur":
                                    key = "–¶—ñ–Ω–∞"
                                    key_value_database = f"{product_database[i]} –≥—Ä–Ω"
                                    key_value_parser = f"{product_parser[i]} –≥—Ä–Ω"
                                elif i == "priceWithDiscount":
                                    key = "–¶—ñ–Ω–∞ –∑—ñ –∑–Ω–∏–∂–∫–æ—é"
                                    key_value_database = f"{product_database[i]} –≥—Ä–Ω"
                                    key_value_parser = f"{product_parser[i]} –≥—Ä–Ω"
                                elif i == "priceBigOpt":
                                    key = "–¶—ñ–Ω–∞ –æ–ø—Ç–æ–º"
                                    key_value_database = f"{product_database[i]} –≥—Ä–Ω"
                                    key_value_parser = f"{product_parser[i]} –≥—Ä–Ω"
                                elif i == "bigOptQuantity":
                                    key = "–¶—ñ–ª—å–∫—ñ—Å—Ç—å —Ç–æ–≤–∞—Ä—ñ–≤ –¥–ª—è –æ–ø—Ç—É"
                                    key_value_database = f"{product_database[i]} —à—Ç"
                                    key_value_parser = f"{product_parser[i]} —à—Ç"
                                elif i == "priceSrp":
                                    key = "–†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–∞ —Ä–æ–∑–¥—Ä—ñ–±–Ω–∞ —Ü—ñ–Ω–∞"
                                    key_value_database = f"{product_database[i]} –≥—Ä–Ω"
                                    key_value_parser = f"{product_parser[i]} –≥—Ä–Ω"
                                elif i == "isHidden":
                                    key = "–ù–∞—è–≤–Ω—ñ—Å—Ç—å"
                                    key_value_parser = "–Ñ –≤ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ" if product_parser[i] == False else "–ù–µ–º–∞—î –≤ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ"
                                    key_value_database = "–Ñ –≤ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ" if product_database[i] == False else "–ù–µ–º–∞—î –≤ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ"

                                
                                # if i == "isHidden":
                                reply_string += f"{key} —Ç–æ–≤–∞—Ä—É –∑–º—ñ–Ω–∏–ª–∞—Å—å.\n–†–∞–Ω—ñ—à–µ: {key_value_database}\n–ó–∞—Ä–∞–∑: {key_value_parser}\n\n"
                                    # self.send_message(self.chat_id_for_reminder, f"{key} —Ç–æ–≤–∞—Ä—É {product_parser['title']} –∑–º—ñ–Ω–∏–ª–∞—Å—å.\n{key} —Ä–∞–Ω—ñ—à–µ: {key_value_database}\n{key} –∑–∞—Ä–∞–∑: {key_value_parser}")
                                # else:
                                    # reply_string += f"{key} —Ç–æ–≤–∞—Ä—É –∑–º—ñ–Ω–∏–ª–∞—Å—å.\n–†–∞–Ω—ñ—à–µ: {product_database[i]}\n–ó–∞—Ä–∞–∑: {product_parser[i]}\n\n"
                                    # self.send_message(self.chat_id_for_reminder, f"{key} —Ç–æ–≤–∞—Ä—É {product_parser["title"]} –∑–º—ñ–Ω–∏–ª–∞—Å—å.\n{key} —Ä–∞–Ω—ñ—à–µ: {product_database[i]}\n{key} –∑–∞—Ä–∞–∑: {product_parser[i]}")
                                self.db.update("url", link, i, product_parser[i])
                            else:
                                print(f"product {i} has not changed")
                        if product_change_status == True:
                            self.send_message(self.chat_id_for_reminder, reply_string)
                except Exception as e:
                    print("Exception1:", e)
            else:
                print("No chat id found for reminder")

    
    def schedule_parse_time(self, hour: int = 19, minutes: int = 0) -> None:
        self.scheduler.remove_all_jobs()
        self.scheduler.add_job(self.update_products_daily, 'cron', hour=hour, minute=minutes)
        #? print(self.scheduler.get_jobs())
        print(f"üü¢ Products check will be started at {hour}:{minutes}")


    #! –í –∏–¥–µ–∞–ª–µ –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å, —á—Ç–æ–±—ã time —Å–æ—Ö—Ä–∞–Ω—è–ª—Å—è –µ—â—ë –∏ –≤ –ë–î
    def set_time(self, message: Message) -> None:
        """ sets check time from given message """
        time: str = message.text
        hour, minutes = self.convert_time(time)
        #? print("üêç hour / minutes: ",hour, minutes)

        if hour is None or minutes is None:
            self.send_message(message.chat.id, f"–ü–µ—Ä–µ–≤i—Ä —Ñ–æ—Ä–º–∞—Ç –≤–≤–æ–¥—É. –ü–æ–≤–∏–Ω–Ω–æ –±—É—Ç–∏ –¥–≤–∞ —á–∏—Å–ª–∞ –∑ –¥–≤—É–∫—Ä–∞–ø–∫–æ—é: 19:00, 20:00...\n\n–ó–∞–ø—É—Å—Ç–∏ –∫–æ–º–∞–Ω–¥—É /{bot_commands.set_time} —â–µ —Ä–∞–∑ —Ç–∞ –≤–≤–µ–¥–∏ —á–∞—Å —É –ø–æ—Ç—Äi–±–Ω–æ–º—É —Ñ–æ—Ä–º–∞—Çi")
        else: 
            self.schedule_parse_time(hour, minutes)
            minutes = self.format_minutes(minutes)

            self.send_message(message.chat.id, f"–î–æ–±—Ä–µ, –∑–∞–≤–æ–∂—É –≥–æ–¥–∏–Ω–Ω–∏–∫ –Ω–∞ {hour}:{minutes}! –ß–µ–∫–∞–π –∞–ø–¥–µ–π—Ç–∏ –ø–æ —Ç–æ–≤–∞—Ä–∞–º ‚≠ê")

    
    def format_minutes(self, minutes: int) -> str:
        """Formats minutes as a 2-digit string (e.g. 0 ‚Üí '00', 5 ‚Üí '05')"""
        return f"{minutes:02}"


    def convert_time(self, time: str = "") -> list[int] | list[None]:
        """ converts string into list of integers """
        if ":" in time:
            return list(map(int, time.split(":")))
        return [None, None]            

        