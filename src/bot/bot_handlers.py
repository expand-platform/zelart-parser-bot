import telebot
from telebot.types import Message, BotCommand
import os
from dotenv import load_dotenv, dotenv_values
from src.parser.zelart_parser import PrestaShopScraper
from src.database.mongodb import Database
from apscheduler.schedulers.background import BackgroundScheduler
from dataclasses import dataclass
from src.bot.exception_handler import ExceptionHandler
from src.bot.helpers import Helpers

#! –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã —Ç–æ–∂–µ –ª—É—á—à–µ —Ö—Ä–∞–Ω–∏—Ç—å –æ—Ç–¥–µ–ª—å–Ω–æ
ZELART_WEBSITE = "zelart.com.ua"

#? –¥–∞—Ç–∞–∫–ª–∞—Å—Å—ã - —ç—Ç–æ –∏–º–±–∞
@dataclass
class BotCommands:
    start: str = "start"
    add_product: str = "add"
    remove_product: str = "remove"
    set_time: str = "time"
    info: str = "info"
    help: str = "help"

bot_commands = BotCommands()


class Bot:
    def __init__(self):
        BOT_TOKEN = os.environ["BOT_TOKEN"]
        self.bot = telebot.TeleBot(BOT_TOKEN, exception_handler=ExceptionHandler())

        self.helpers = Helpers(self.bot)

        self.db = Database()
        hours, minutes = self.db.get_parse_time()

        self.scheduler = BackgroundScheduler()
        self.helpers.schedule_parse_time(self.scheduler, hours, minutes) 
        

        self.setup_command_menu()
        self.setup_command_handlers()


    def setup_command_menu(self):
        commands = [
            BotCommand(command=bot_commands.add_product, description="–î–æ–¥–∞—Ç–∏ —Ç–æ–≤–∞—Ä"),
            BotCommand(command=bot_commands.remove_product, description="–í–∏–¥–∞–ª–∏—Ç–∏ —Ç–æ–≤–∞—Ä"),
            BotCommand(command=bot_commands.info, description="–ó–≤i—Ç"),
            BotCommand(command=bot_commands.set_time, description="–ó–∞–¥–∞—Ç–∏ —á–∞—Å –ø–∞—Ä—Å–∏–Ω–≥—É"),
            BotCommand(command=bot_commands.help, description="–í—Åi –∫–æ–º–∞–Ω–¥–∏ –±–æ—Ç–∞"),
        ]
        self.bot.set_my_commands(commands)


    def setup_command_handlers(self):
        @self.bot.message_handler(commands=[bot_commands.start])
        def send_welcome(message: Message):
            user = {
                "chat_id": message.from_user.id,
                "username": message.from_user.username,
            }
            self.db.insert_user(user)

            # self.helpers.update_products_daily()
            self.bot.send_message(message.from_user.id, f"–ü—Ä–∏–≤—ñ—Ç! –Ø –±–æ—Ç –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥—É {ZELART_WEBSITE}")
            self.helpers.get_info(message)

        def add_product_command_chain():
            """ adds product to DB """
            @self.bot.message_handler(commands=[bot_commands.add_product]) 
            def add_product(message: Message):
                """ first step of adding product """
                self.bot.send_message(message.from_user.id, f"–í–≤–µ–¥–∏ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ —Ç–æ–≤–∞—Ä i–∑ —Å–∞–π—Ç—É {ZELART_WEBSITE}")
                self.bot.register_next_step_handler(message, process_parse_link)

            def process_parse_link(message: Message):
                """ second step of adding product """
                try:
                    link = message.text
                    parser = PrestaShopScraper()
                    product = parser.scrape_product(link)

                    self.db.insert_product(product)

                    if product["isHidden"] == True:
                        stock = "–ù–µ–º–∞—î –≤ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ"
                    elif product["isHidden"] == False:
                        stock = "–Ñ –≤ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ"

                    #! –î–∞–ª—å—à–µ –∏–¥—ë—Ç —Ç—É–ø–æ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–¥–∞, –µ–≥–æ –º–æ–∂–Ω–æ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å
                    if product["priceCur"] == product["priceWithDiscount"]:
                        self.bot.send_message(
                        message.from_user.id,
                        f"""‚ûï –¢–µ–ø–µ—Ä —è —Å–ªi–¥–∫—É—é –∑–∞ —Ç–æ–≤–∞—Ä–æ–º:\n{link}

- –ù–∞–∑–≤–∞: {product["title"]}
- –¶—ñ–Ω–∞ –æ–ø—Ç–æ–º: {product["priceCur"]} –≥—Ä–Ω
- –¶—ñ–ª—å–∫—ñ—Å—Ç—å —Ç–æ–≤–∞—Ä—ñ–≤ –¥–ª—è –æ–ø—Ç—É: {product["bigOptQuantity"]} —à—Ç
- –†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–∞ —Ä–æ–∑–¥—Ä—ñ–±–Ω–∞ —Ü—ñ–Ω–∞: {product["priceSrp"]} –≥—Ä–Ω
- –ù–∞—è–≤–Ω—ñ—Å—Ç—å: {stock}
"""
            )
                    elif product["priceCur"] != product["priceWithDiscount"]:
                        self.bot.send_message(
                        message.from_user.id,
                        f"""‚ûï –¢–µ–ø–µ—Ä —è —Å–ªi–¥–∫—É—é –∑–∞ —Ç–æ–≤–∞—Ä–æ–º:\n{link}

- –ù–∞–∑–≤–∞: {product["title"]}
- –¶—ñ–Ω–∞ –æ–ø—Ç–æ–º: {product["priceCur"]} –≥—Ä–Ω
- –¶—ñ–Ω–∞ –∑—ñ –∑–Ω–∏–∂–∫–æ—é: {product["priceWithDiscount"]} –≥—Ä–Ω
- –¶—ñ–ª—å–∫—ñ—Å—Ç—å —Ç–æ–≤–∞—Ä—ñ–≤ –¥–ª—è –æ–ø—Ç—É: {product["bigOptQuantity"]} —à—Ç
- –†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–∞ —Ä–æ–∑–¥—Ä—ñ–±–Ω–∞ —Ü—ñ–Ω–∞: {product["priceSrp"]} –≥—Ä–Ω
- –ù–∞—è–≤–Ω—ñ—Å—Ç—å: {stock}
"""
            )
                except:
                    self.bot.send_message(message.from_user.id, f"–û–π! –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞, –ø–µ—Ä–µ–≤—ñ—Ä –ø–æ—Å–∏–ª–∞–Ω–Ω—è —Ç–∞ —Å–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑.")
        add_product_command_chain()

        def set_time_command_chain():
            """ sets time for checking products """
            #? /time
            @self.bot.message_handler(commands=[bot_commands.set_time])
            def set_time(message: Message):
                """ first step of setting time """
                parse_time = self.helpers.get_parse_time()
                
                self.bot.send_message(message.from_user.id, f"–û –∫–æ—Ç—Äi–π –º–µ–Ωi –∫—Ä–∞—â–µ –ø–µ—Ä–µ–≤i—Ä—è—Ç–∏ —Ç–æ–≤–∞—Ä–∏?\n\n–ó–∞—Ä–∞–∑ —Ü–µ {parse_time}")
                self.bot.register_next_step_handler(message, set_time_second_step)

            def set_time_second_step(message: Message) -> None:
                """ sets check time from given message """
                time: str = message.text
                hour, minutes = self.helpers.convert_time(time)
                #? print("üêç hour / minutes: ",hour, minutes)
                self.helpers.save_time([hour, minutes])

                if hour is None or minutes is None:
                    self.bot.send_message(message.chat.id, f"–ü–µ—Ä–µ–≤i—Ä —Ñ–æ—Ä–º–∞—Ç –≤–≤–æ–¥—É. –ü–æ–≤–∏–Ω–Ω–æ –±—É—Ç–∏ –¥–≤–∞ —á–∏—Å–ª–∞ –∑ –¥–≤—É–∫—Ä–∞–ø–∫–æ—é: 19:00, 20:00...\n\n–ó–∞–ø—É—Å—Ç–∏ –∫–æ–º–∞–Ω–¥—É /{bot_commands.set_time} —â–µ —Ä–∞–∑ —Ç–∞ –≤–≤–µ–¥–∏ —á–∞—Å —É –ø–æ—Ç—Äi–±–Ω–æ–º—É —Ñ–æ—Ä–º–∞—Çi")
                else: 
                    self.helpers.schedule_parse_time(self.scheduler, hour, minutes)
                    minutes = self.helpers.format_minutes(minutes)

                    self.bot.send_message(message.chat.id, f"–î–æ–±—Ä–µ, –∑–∞–≤–æ–¥–∂—É –≥–æ–¥–∏–Ω–Ω–∏–∫ –Ω–∞ {hour}:{minutes}!\n\n–ß–µ–∫–∞–π –∞–ø–¥–µ–π—Ç–∏ –ø–æ —Ç–æ–≤–∞—Ä–∞–º ‚≠ê")
        set_time_command_chain()
        
        def remove_product_command_chain():
            """ removes product from DB """
            #? /remove

            @self.bot.message_handler(commands=[bot_commands.remove_product])
            def remove_product(message: Message):
                """ first step of removing product """
                self.bot.send_message(message.from_user.id, f"üîó –íi–¥–ø—Ä–∞–≤ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –ø—Ä–æ–¥—É–∫—Ç, —è–∫–∏–π —Ö–æ—á–µ—à –≤–∏–¥–∞–ª–∏—Ç–∏")
                self.bot.register_next_step_handler(message, remove_product_second_step)

            def remove_product_second_step(message: Message):
                """ second step of removing product """
                link = message.text
                parser = PrestaShopScraper()
                product = parser.scrape_product(link)
                #? print("üêç product: ",product)

                if product:
                    product_id = product["id"]
                    self.db.remove_product(product_id)
                    self.bot.send_message(message.chat.id, f"–¢–æ–≤–∞—Ä –∑ id {product_id} –±i–ª—å—à–µ –Ω–µ –≤i–¥—Å–ªi–¥–∫–æ–≤—É—î—Ç—å—Å—è üëå")

                else:
                    print(f"Can't get product info by this link: {link}")
                    self.bot.send_message(message.chat.id, f"–Ø –Ω–µ –∑–ºi–≥ –¥i—Å—Ç–∞—Ç–∏ i–Ω—Ñ—É –ø–æ —Ü—å–æ–º—É —Ç–æ–≤–∞—Ä—É, –≤–∏–±–∞—á üò≠")
        remove_product_command_chain()
        
        #? /info
        @self.bot.message_handler(commands=[bot_commands.info])
        def get_info(message: Message):
            self.bot.send_message(message.from_user.id, f"üë∑‚Äç‚ôÇÔ∏è –ó–≤i—Ç—É—é –ø—Ä–æ —Ä–æ–±–æ—Ç—É")
            self.helpers.get_info(message)
        
        #? /help
        @self.bot.message_handler(commands=[bot_commands.help])
        def get_help(message: Message):
            self.bot.send_message(message.from_user.id, f"‚≠ê –£—Å—ñ –∫–æ–º–∞–Ω–¥–∏ –±–æ—Ç–∞\n\n/{bot_commands.start} - –°—Ç–∞—Ä—Ç\n/{bot_commands.add_product} - –î–æ–¥–∞—Ç–∏ —Ç–æ–≤–∞—Ä\n/{bot_commands.remove_product} - –í–∏–¥–∞–ª–∏—Ç–∏ —Ç–æ–≤–∞—Ä\n/{bot_commands.info} - –ó–≤i—Ç –ø—Ä–æ —Ä–æ–±–æ—Ç—É\n/{bot_commands.set_time} - –ó–∞–¥–∞—Ç–∏ —á–∞—Å –ø–∞—Ä—Å–∏–Ω–≥—É")



    

    
